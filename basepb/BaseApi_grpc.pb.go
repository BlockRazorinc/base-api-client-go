// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: BaseApi.proto

package basepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BaseApi_SendTransaction_FullMethodName        = "/BaseApi/SendTransaction"
	BaseApi_GetBlockStream_FullMethodName         = "/BaseApi/GetBlockStream"
	BaseApi_GetRawFlashBlockStream_FullMethodName = "/BaseApi/GetRawFlashBlockStream"
)

// BaseApiClient is the client API for BaseApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseApiClient interface {
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	GetBlockStream(ctx context.Context, in *GetBlockStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BaseBlock], error)
	GetRawFlashBlockStream(ctx context.Context, in *GetRawFlashBlocksStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RawFlashBlockStrResponse], error)
}

type baseApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseApiClient(cc grpc.ClientConnInterface) BaseApiClient {
	return &baseApiClient{cc}
}

func (c *baseApiClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendTransactionResponse)
	err := c.cc.Invoke(ctx, BaseApi_SendTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseApiClient) GetBlockStream(ctx context.Context, in *GetBlockStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BaseBlock], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BaseApi_ServiceDesc.Streams[0], BaseApi_GetBlockStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBlockStreamRequest, BaseBlock]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BaseApi_GetBlockStreamClient = grpc.ServerStreamingClient[BaseBlock]

func (c *baseApiClient) GetRawFlashBlockStream(ctx context.Context, in *GetRawFlashBlocksStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RawFlashBlockStrResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BaseApi_ServiceDesc.Streams[1], BaseApi_GetRawFlashBlockStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetRawFlashBlocksStreamRequest, RawFlashBlockStrResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BaseApi_GetRawFlashBlockStreamClient = grpc.ServerStreamingClient[RawFlashBlockStrResponse]

// BaseApiServer is the server API for BaseApi service.
// All implementations must embed UnimplementedBaseApiServer
// for forward compatibility.
type BaseApiServer interface {
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
	GetBlockStream(*GetBlockStreamRequest, grpc.ServerStreamingServer[BaseBlock]) error
	GetRawFlashBlockStream(*GetRawFlashBlocksStreamRequest, grpc.ServerStreamingServer[RawFlashBlockStrResponse]) error
	mustEmbedUnimplementedBaseApiServer()
}

// UnimplementedBaseApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBaseApiServer struct{}

func (UnimplementedBaseApiServer) SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedBaseApiServer) GetBlockStream(*GetBlockStreamRequest, grpc.ServerStreamingServer[BaseBlock]) error {
	return status.Errorf(codes.Unimplemented, "method GetBlockStream not implemented")
}
func (UnimplementedBaseApiServer) GetRawFlashBlockStream(*GetRawFlashBlocksStreamRequest, grpc.ServerStreamingServer[RawFlashBlockStrResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetRawFlashBlockStream not implemented")
}
func (UnimplementedBaseApiServer) mustEmbedUnimplementedBaseApiServer() {}
func (UnimplementedBaseApiServer) testEmbeddedByValue()                 {}

// UnsafeBaseApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseApiServer will
// result in compilation errors.
type UnsafeBaseApiServer interface {
	mustEmbedUnimplementedBaseApiServer()
}

func RegisterBaseApiServer(s grpc.ServiceRegistrar, srv BaseApiServer) {
	// If the following call pancis, it indicates UnimplementedBaseApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BaseApi_ServiceDesc, srv)
}

func _BaseApi_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseApiServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseApi_SendTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseApiServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseApi_GetBlockStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlockStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseApiServer).GetBlockStream(m, &grpc.GenericServerStream[GetBlockStreamRequest, BaseBlock]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BaseApi_GetBlockStreamServer = grpc.ServerStreamingServer[BaseBlock]

func _BaseApi_GetRawFlashBlockStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRawFlashBlocksStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BaseApiServer).GetRawFlashBlockStream(m, &grpc.GenericServerStream[GetRawFlashBlocksStreamRequest, RawFlashBlockStrResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BaseApi_GetRawFlashBlockStreamServer = grpc.ServerStreamingServer[RawFlashBlockStrResponse]

// BaseApi_ServiceDesc is the grpc.ServiceDesc for BaseApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BaseApi",
	HandlerType: (*BaseApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransaction",
			Handler:    _BaseApi_SendTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlockStream",
			Handler:       _BaseApi_GetBlockStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRawFlashBlockStream",
			Handler:       _BaseApi_GetRawFlashBlockStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "BaseApi.proto",
}
